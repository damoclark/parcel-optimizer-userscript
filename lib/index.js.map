{"mappings":";;;;;;;;;;;;;;;;;;;AAGA;;;;;IAaA,wCA2DI,GA3DY,IAAI,CAAA,GAAA,6BAAS,CAAA,CAAgB;IAC5C,MAAM,UAAU,EAAC,UAAC,MAAM,CAAA,WAAE,OAAO,CAAA,EAAC,EAAE;QACnC,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,SAAS,CACxC;YAAC,eAAe;YAAE,kBAAkB;SAAC,EACrC;YAAC,UAAU,EAAE,yCAAyC;SAAC,CACvD,AAAC;QAEF,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,SAAS,CACjC;YAAC,cAAc;SAAC,EAChB;YAAC,UAAU,EAAE,yCAAyC;SAAC,CACvD,AAAC;QAEF,IAAI,UAAU,EAAE;YACf,IAAI,YAAY,GAAG,mBAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,KAAK,AAAC;YAC/D,IAAI,YAAY,EACf,MAAM,CAAC,mBAAmB,EAAE,CAAC;SAE9B;QAED,MAAM,QAAQ,GAAG,UAAU,EAAE,QAAQ,IAAI,EAAE,AAAC;QAE5C,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE;YAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,IAAI,YAAY;SAAC,CAAC,CAAC;QAE3E,OAAO,QAAQ,CAAC;KAChB;IAED,MAAM,QAAQ,EAAC,UAAC,MAAM,CAAA,YAAE,QAAQ,CAAA,OAAE,GAAG,CAAA,EAAC,EAAE;QACvC,IAAI,IAAI,GAAG,MAAM,CAAA,GAAA,+BAAY,CAAA,CAAC,QAAQ,CAAC,AAAC;QAExC,8DAA8D;QAC9D,IAAI;YACH,IAAI,MAAM,EAAE,cAAc,EAAE;gBAC3B,MAAM,IAAI,GAAG,AAAC,CAAA,MAAM,CAAA,GAAA,kBAAE,CAAA,CAAC,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC,CAAA,CAAE,QAAQ,CAAC,OAAO,CAAC,AAAC;gBAC1E,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,mBAAmB,MAAM,CAAC,OAAO,CAAC,AAAC;gBAEpE,IAAI,GAAG,CAAC,EAAE,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;aAClC,MACA,MAAM,IAAI,CAAA,GAAA,iDAAmB,CAAA,CAAC;gBAC7B,UAAU,EAAE;oBACX,OAAO,EAAE,oCAAoC;oBAC7C,KAAK,EAAE;wBACN,4EAA4E;qBAC5E;iBACD;aACD,CAAC,CAAC;SAEJ,CAAC,OAAM;YACP,MAAM,IAAI,CAAA,GAAA,iDAAmB,CAAA,CAAC;gBAC7B,UAAU,EAAE;oBACX,OAAO,EAAE,+CAA+C;oBACxD,KAAK,EAAE;wBACN,4DAA4D;qBAC5D;iBACD;aACD,CAAC,CAAC;SACH;QAED,OAAO;YAAC,QAAQ,EAAE,IAAI;iBAAE,GAAG;SAAC,CAAA;KAC5B;CACD,CAAC","sources":["src/index.ts"],"sourcesContent":["/**\n * Source code written by AKP Tools (akp-tools@akpwebdesign.com)\n */\nimport ThrowableDiagnostic from \"@parcel/diagnostic\";\nimport {Optimizer} from '@parcel/plugin';\nimport {blobToString} from '@parcel/utils';\nimport {PackageJSON} from '@parcel/types';\n\nimport {promises as fs} from 'fs' ;\nimport * as path from 'path';\n\ninterface PluginOptions {\n\tuserscriptMeta?: string;\n\tversion?: string;\n}\n\nexport default (new Optimizer<PluginOptions>({\n\tasync loadConfig({config, options}) {\n\t\tconst userConfig = await config.getConfig<PluginOptions>(\n\t\t\t['.userscriptrc', '.userscriptrc.js'],\n\t\t\t{packageKey: '@damoclarky/parcel-optimizer-userscript'}\n\t\t);\n\n\t\tconst pkg = await config.getConfig<PackageJSON>(\n\t\t\t['package.json'],\n\t\t\t{packageKey: '@damoclarky/parcel-optimizer-userscript'}\n\t\t);\n\n\t\tif (userConfig) {\n\t\t\tlet isJavascript = path.extname(userConfig.filePath) === '.js';\n\t\t\tif (isJavascript) {\n\t\t\t\tconfig.invalidateOnStartup();\n\t\t\t}\n\t\t}\n\n\t\tconst contents = userConfig?.contents ?? {};\n\n\t\tObject.assign(contents, {version: pkg?.contents?.version ?? 'no-version'});\n\n\t\treturn contents;\n\t},\n\n\tasync optimize({config, contents, map}) {\n\t\tlet code = await blobToString(contents);\n\n\t\t// if the userscriptMeta config exists, let's find and add it.\n\t\ttry {\n\t\t\tif (config?.userscriptMeta) {\n\t\t\t\tconst meta = (await fs.readFile(config.userscriptMeta)).toString('utf-8');\n\t\t\t\tconst preparedMeta = meta.replace(/{{ version }}/g, config.version);\n\n\t\t\t\tcode = `${preparedMeta}\\n${code}`;\n\t\t\t} else {\n\t\t\t\tthrow new ThrowableDiagnostic({\n\t\t\t\t\tdiagnostic: {\n\t\t\t\t\t\tmessage: 'No userscript metadata path found!',\n\t\t\t\t\t\thints: [\n\t\t\t\t\t\t\t\"Make sure you create a .userscriptrc file and use it to specify your meta!\",\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t} catch {\n\t\t\tthrow new ThrowableDiagnostic({\n\t\t\t\tdiagnostic: {\n\t\t\t\t\tmessage: 'Specified userscript metadata path not found!',\n\t\t\t\t\thints: [\n\t\t\t\t\t\t\"Make sure the meta file specified in .userscriptrc exists!\",\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\treturn {contents: code, map}\n\t},\n}));\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}